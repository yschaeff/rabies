
Build/app.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <deregister_tm_clones>:
 80000c0:	4804      	ldr	r0, [pc, #16]	@ (80000d4 <deregister_tm_clones+0x14>)
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <deregister_tm_clones+0x18>)
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4283      	cmp	r3, r0
 80000c8:	d003      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000ca:	4b04      	ldr	r3, [pc, #16]	@ (80000dc <deregister_tm_clones+0x1c>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d000      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000d0:	4798      	blx	r3
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000fc 	.word	0x200000fc
 80000d8:	200000fc 	.word	0x200000fc
 80000dc:	00000000 	.word	0x00000000

080000e0 <register_tm_clones>:
 80000e0:	4806      	ldr	r0, [pc, #24]	@ (80000fc <register_tm_clones+0x1c>)
 80000e2:	4907      	ldr	r1, [pc, #28]	@ (8000100 <register_tm_clones+0x20>)
 80000e4:	1a09      	subs	r1, r1, r0
 80000e6:	108b      	asrs	r3, r1, #2
 80000e8:	0fc9      	lsrs	r1, r1, #31
 80000ea:	18c9      	adds	r1, r1, r3
 80000ec:	b510      	push	{r4, lr}
 80000ee:	1049      	asrs	r1, r1, #1
 80000f0:	d003      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f2:	4b04      	ldr	r3, [pc, #16]	@ (8000104 <register_tm_clones+0x24>)
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d000      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f8:	4798      	blx	r3
 80000fa:	bd10      	pop	{r4, pc}
 80000fc:	200000fc 	.word	0x200000fc
 8000100:	200000fc 	.word	0x200000fc
 8000104:	00000000 	.word	0x00000000

08000108 <__do_global_dtors_aux>:
 8000108:	b510      	push	{r4, lr}
 800010a:	4c07      	ldr	r4, [pc, #28]	@ (8000128 <__do_global_dtors_aux+0x20>)
 800010c:	7823      	ldrb	r3, [r4, #0]
 800010e:	2b00      	cmp	r3, #0
 8000110:	d109      	bne.n	8000126 <__do_global_dtors_aux+0x1e>
 8000112:	f7ff ffd5 	bl	80000c0 <deregister_tm_clones>
 8000116:	4b05      	ldr	r3, [pc, #20]	@ (800012c <__do_global_dtors_aux+0x24>)
 8000118:	2b00      	cmp	r3, #0
 800011a:	d002      	beq.n	8000122 <__do_global_dtors_aux+0x1a>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x28>)
 800011e:	e000      	b.n	8000122 <__do_global_dtors_aux+0x1a>
 8000120:	bf00      	nop
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000fc 	.word	0x200000fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08000e80 	.word	0x08000e80

08000134 <frame_dummy>:
 8000134:	4b05      	ldr	r3, [pc, #20]	@ (800014c <frame_dummy+0x18>)
 8000136:	b510      	push	{r4, lr}
 8000138:	2b00      	cmp	r3, #0
 800013a:	d003      	beq.n	8000144 <frame_dummy+0x10>
 800013c:	4904      	ldr	r1, [pc, #16]	@ (8000150 <frame_dummy+0x1c>)
 800013e:	4805      	ldr	r0, [pc, #20]	@ (8000154 <frame_dummy+0x20>)
 8000140:	e000      	b.n	8000144 <frame_dummy+0x10>
 8000142:	bf00      	nop
 8000144:	f7ff ffcc 	bl	80000e0 <register_tm_clones>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	46c0      	nop			@ (mov r8, r8)
 800014c:	00000000 	.word	0x00000000
 8000150:	20000100 	.word	0x20000100
 8000154:	08000e80 	.word	0x08000e80

08000158 <__libc_init_array>:
 8000158:	b570      	push	{r4, r5, r6, lr}
 800015a:	4b0d      	ldr	r3, [pc, #52]	@ (8000190 <__libc_init_array+0x38>)
 800015c:	4d0d      	ldr	r5, [pc, #52]	@ (8000194 <__libc_init_array+0x3c>)
 800015e:	1b5e      	subs	r6, r3, r5
 8000160:	10b6      	asrs	r6, r6, #2
 8000162:	42ab      	cmp	r3, r5
 8000164:	d005      	beq.n	8000172 <__libc_init_array+0x1a>
 8000166:	2400      	movs	r4, #0
 8000168:	cd08      	ldmia	r5!, {r3}
 800016a:	3401      	adds	r4, #1
 800016c:	4798      	blx	r3
 800016e:	42a6      	cmp	r6, r4
 8000170:	d8fa      	bhi.n	8000168 <__libc_init_array+0x10>
 8000172:	f000 fe85 	bl	8000e80 <_init>
 8000176:	4b08      	ldr	r3, [pc, #32]	@ (8000198 <__libc_init_array+0x40>)
 8000178:	4d08      	ldr	r5, [pc, #32]	@ (800019c <__libc_init_array+0x44>)
 800017a:	1b5e      	subs	r6, r3, r5
 800017c:	10b6      	asrs	r6, r6, #2
 800017e:	42ab      	cmp	r3, r5
 8000180:	d005      	beq.n	800018e <__libc_init_array+0x36>
 8000182:	2400      	movs	r4, #0
 8000184:	cd08      	ldmia	r5!, {r3}
 8000186:	3401      	adds	r4, #1
 8000188:	4798      	blx	r3
 800018a:	42a6      	cmp	r6, r4
 800018c:	d8fa      	bhi.n	8000184 <__libc_init_array+0x2c>
 800018e:	bd70      	pop	{r4, r5, r6, pc}
 8000190:	08000eec 	.word	0x08000eec
 8000194:	08000eec 	.word	0x08000eec
 8000198:	08000ef0 	.word	0x08000ef0
 800019c:	08000eec 	.word	0x08000eec

080001a0 <__gnu_thumb1_case_uqi>:
 80001a0:	b402      	push	{r1}
 80001a2:	4671      	mov	r1, lr
 80001a4:	0849      	lsrs	r1, r1, #1
 80001a6:	0049      	lsls	r1, r1, #1
 80001a8:	5c09      	ldrb	r1, [r1, r0]
 80001aa:	0049      	lsls	r1, r1, #1
 80001ac:	448e      	add	lr, r1
 80001ae:	bc02      	pop	{r1}
 80001b0:	4770      	bx	lr
 80001b2:	46c0      	nop			@ (mov r8, r8)

080001b4 <__udivsi3>:
 80001b4:	2200      	movs	r2, #0
 80001b6:	0843      	lsrs	r3, r0, #1
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d374      	bcc.n	80002a6 <__udivsi3+0xf2>
 80001bc:	0903      	lsrs	r3, r0, #4
 80001be:	428b      	cmp	r3, r1
 80001c0:	d35f      	bcc.n	8000282 <__udivsi3+0xce>
 80001c2:	0a03      	lsrs	r3, r0, #8
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d344      	bcc.n	8000252 <__udivsi3+0x9e>
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d328      	bcc.n	8000220 <__udivsi3+0x6c>
 80001ce:	0c03      	lsrs	r3, r0, #16
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d30d      	bcc.n	80001f0 <__udivsi3+0x3c>
 80001d4:	22ff      	movs	r2, #255	@ 0xff
 80001d6:	0209      	lsls	r1, r1, #8
 80001d8:	ba12      	rev	r2, r2
 80001da:	0c03      	lsrs	r3, r0, #16
 80001dc:	428b      	cmp	r3, r1
 80001de:	d302      	bcc.n	80001e6 <__udivsi3+0x32>
 80001e0:	1212      	asrs	r2, r2, #8
 80001e2:	0209      	lsls	r1, r1, #8
 80001e4:	d065      	beq.n	80002b2 <__udivsi3+0xfe>
 80001e6:	0b03      	lsrs	r3, r0, #12
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d319      	bcc.n	8000220 <__udivsi3+0x6c>
 80001ec:	e000      	b.n	80001f0 <__udivsi3+0x3c>
 80001ee:	0a09      	lsrs	r1, r1, #8
 80001f0:	0bc3      	lsrs	r3, r0, #15
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x46>
 80001f6:	03cb      	lsls	r3, r1, #15
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0b83      	lsrs	r3, r0, #14
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x52>
 8000202:	038b      	lsls	r3, r1, #14
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0b43      	lsrs	r3, r0, #13
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x5e>
 800020e:	034b      	lsls	r3, r1, #13
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	0b03      	lsrs	r3, r0, #12
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x6a>
 800021a:	030b      	lsls	r3, r1, #12
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0ac3      	lsrs	r3, r0, #11
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x76>
 8000226:	02cb      	lsls	r3, r1, #11
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0a83      	lsrs	r3, r0, #10
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x82>
 8000232:	028b      	lsls	r3, r1, #10
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	0a43      	lsrs	r3, r0, #9
 800023a:	428b      	cmp	r3, r1
 800023c:	d301      	bcc.n	8000242 <__udivsi3+0x8e>
 800023e:	024b      	lsls	r3, r1, #9
 8000240:	1ac0      	subs	r0, r0, r3
 8000242:	4152      	adcs	r2, r2
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d301      	bcc.n	800024e <__udivsi3+0x9a>
 800024a:	020b      	lsls	r3, r1, #8
 800024c:	1ac0      	subs	r0, r0, r3
 800024e:	4152      	adcs	r2, r2
 8000250:	d2cd      	bcs.n	80001ee <__udivsi3+0x3a>
 8000252:	09c3      	lsrs	r3, r0, #7
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xa8>
 8000258:	01cb      	lsls	r3, r1, #7
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0983      	lsrs	r3, r0, #6
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xb4>
 8000264:	018b      	lsls	r3, r1, #6
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0943      	lsrs	r3, r0, #5
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__udivsi3+0xc0>
 8000270:	014b      	lsls	r3, r1, #5
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xcc>
 800027c:	010b      	lsls	r3, r1, #4
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	08c3      	lsrs	r3, r0, #3
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xd8>
 8000288:	00cb      	lsls	r3, r1, #3
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0883      	lsrs	r3, r0, #2
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__udivsi3+0xe4>
 8000294:	008b      	lsls	r3, r1, #2
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0843      	lsrs	r3, r0, #1
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__udivsi3+0xf0>
 80002a0:	004b      	lsls	r3, r1, #1
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	1a41      	subs	r1, r0, r1
 80002a8:	d200      	bcs.n	80002ac <__udivsi3+0xf8>
 80002aa:	4601      	mov	r1, r0
 80002ac:	4152      	adcs	r2, r2
 80002ae:	4610      	mov	r0, r2
 80002b0:	4770      	bx	lr
 80002b2:	e7ff      	b.n	80002b4 <__udivsi3+0x100>
 80002b4:	b501      	push	{r0, lr}
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 f806 	bl	80002c8 <__aeabi_idiv0>
 80002bc:	bd02      	pop	{r1, pc}
 80002be:	46c0      	nop			@ (mov r8, r8)

080002c0 <__aeabi_uidivmod>:
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d0f7      	beq.n	80002b4 <__udivsi3+0x100>
 80002c4:	e776      	b.n	80001b4 <__udivsi3>
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_idiv0>:
 80002c8:	4770      	bx	lr
 80002ca:	46c0      	nop			@ (mov r8, r8)

080002cc <NMI_Handler>:
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
}
 80002cc:	4770      	bx	lr

080002ce <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  while (1)
 80002ce:	e7fe      	b.n	80002ce <HardFault_Handler>

080002d0 <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
 80002d0:	4770      	bx	lr

080002d2 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80002d2:	4770      	bx	lr

080002d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002d4:	b510      	push	{r4, lr}
  HAL_IncTick();
 80002d6:	f000 fd73 	bl	8000dc0 <HAL_IncTick>
}
 80002da:	bd10      	pop	{r4, pc}

080002dc <BSP_HSI_24MHzClockConfig>:
 *  AHB: 24Mhz
 *  APB: 24Mhz
 * */
void BSP_HSI_24MHzClockConfig(void) {
  /* Sigh, this reads internal flash and that makes it non-const */
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_24MHz;   /* Set HSI clock 24MHz */
 80002dc:	2280      	movs	r2, #128	@ 0x80
 80002de:	4b08      	ldr	r3, [pc, #32]	@ (8000300 <BSP_HSI_24MHzClockConfig+0x24>)
void BSP_HSI_24MHzClockConfig(void) {
 80002e0:	b510      	push	{r4, lr}
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_24MHz;   /* Set HSI clock 24MHz */
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	0212      	lsls	r2, r2, #8
 80002e6:	04db      	lsls	r3, r3, #19
 80002e8:	4806      	ldr	r0, [pc, #24]	@ (8000304 <BSP_HSI_24MHzClockConfig+0x28>)
 80002ea:	0cdb      	lsrs	r3, r3, #19
 80002ec:	4313      	orrs	r3, r2
 80002ee:	6143      	str	r3, [r0, #20]
  /* Setup for 24Mhz */
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002f0:	f000 fb76 	bl	80009e0 <HAL_RCC_OscConfig>
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80002f4:	2100      	movs	r1, #0
 80002f6:	4804      	ldr	r0, [pc, #16]	@ (8000308 <BSP_HSI_24MHzClockConfig+0x2c>)
 80002f8:	f000 fc8c 	bl	8000c14 <HAL_RCC_ClockConfig>
}
 80002fc:	bd10      	pop	{r4, pc}
 80002fe:	46c0      	nop			@ (mov r8, r8)
 8000300:	1fff0f10 	.word	0x1fff0f10
 8000304:	200000d0 	.word	0x200000d0
 8000308:	200000c0 	.word	0x200000c0

0800030c <cfg_pin>:
bool K_BINARY_INPUTS[K] = {0};



static void cfg_pin(uint32_t pin, uint32_t mode, uint32_t pull)
{
 800030c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    GPIO_InitTypeDef pin_cfg;

    pin_cfg.Pin   = pin;
 800030e:	9001      	str	r0, [sp, #4]
    pin_cfg.Mode  = mode;
    pin_cfg.Pull  = pull;
 8000310:	9203      	str	r2, [sp, #12]
    pin_cfg.Speed = GPIO_SPEED_FREQ_HIGH;
    //MEGA HACK SMELLY CODE.
    //We only specify mode = Alternate Function for one pin. and so this works.
    //Do not do try this at home.
    pin_cfg.Alternate = GPIO_AF13_TIM1;
    HAL_GPIO_Init(GPIOA, &pin_cfg);
 8000312:	20a0      	movs	r0, #160	@ 0xa0
    pin_cfg.Speed = GPIO_SPEED_FREQ_HIGH;
 8000314:	2202      	movs	r2, #2
    pin_cfg.Pin   = pin;
 8000316:	ab01      	add	r3, sp, #4
    pin_cfg.Mode  = mode;
 8000318:	9102      	str	r1, [sp, #8]
    pin_cfg.Speed = GPIO_SPEED_FREQ_HIGH;
 800031a:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOA, &pin_cfg);
 800031c:	0019      	movs	r1, r3
    pin_cfg.Alternate = GPIO_AF13_TIM1;
 800031e:	320b      	adds	r2, #11
    HAL_GPIO_Init(GPIOA, &pin_cfg);
 8000320:	05c0      	lsls	r0, r0, #23
    pin_cfg.Alternate = GPIO_AF13_TIM1;
 8000322:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &pin_cfg);
 8000324:	f000 fa88 	bl	8000838 <HAL_GPIO_Init>
}
 8000328:	b007      	add	sp, #28
 800032a:	bd00      	pop	{pc}

0800032c <EXTI0_1_IRQHandler>:
 * Rising and falling edges
 */
void EXTI0_1_IRQHandler(void)
{
    //I think this causes bounce issues
    K_BINARY_INPUTS[0] = !HAL_GPIO_ReadPin(GPIOA, SWC_PIN);
 800032c:	20a0      	movs	r0, #160	@ 0xa0
{
 800032e:	b510      	push	{r4, lr}
    K_BINARY_INPUTS[0] = !HAL_GPIO_ReadPin(GPIOA, SWC_PIN);
 8000330:	2102      	movs	r1, #2
 8000332:	05c0      	lsls	r0, r0, #23
 8000334:	f000 fb1c 	bl	8000970 <HAL_GPIO_ReadPin>
 8000338:	4242      	negs	r2, r0
 800033a:	4150      	adcs	r0, r2
    __HAL_GPIO_EXTI_CLEAR_IT(SWC_PIN);
 800033c:	2202      	movs	r2, #2
    K_BINARY_INPUTS[0] = !HAL_GPIO_ReadPin(GPIOA, SWC_PIN);
 800033e:	4b02      	ldr	r3, [pc, #8]	@ (8000348 <EXTI0_1_IRQHandler+0x1c>)
 8000340:	7018      	strb	r0, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(SWC_PIN);
 8000342:	4b02      	ldr	r3, [pc, #8]	@ (800034c <EXTI0_1_IRQHandler+0x20>)
 8000344:	60da      	str	r2, [r3, #12]
}
 8000346:	bd10      	pop	{r4, pc}
 8000348:	20000118 	.word	0x20000118
 800034c:	40021800 	.word	0x40021800

08000350 <main>:

int main(void)
{
 8000350:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000352:	2401      	movs	r4, #1
    /* Setup clock BEFORE HAL_Init.
     * And before running anything else */
    BSP_HSI_24MHzClockConfig();
 8000354:	f7ff ffc2 	bl	80002dc <BSP_HSI_24MHzClockConfig>
    HAL_Init();
 8000358:	f000 fd26 	bl	8000da8 <HAL_Init>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b29      	ldr	r3, [pc, #164]	@ (8000404 <main+0xb4>)
    cfg_pin(SWC_PIN,     GPIO_MODE_IT_RISING_FALLING, GPIO_PULLUP);
 800035e:	2002      	movs	r0, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    cfg_pin(SWC_PIN,     GPIO_MODE_IT_RISING_FALLING, GPIO_PULLUP);
 8000362:	4929      	ldr	r1, [pc, #164]	@ (8000408 <main+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	4322      	orrs	r2, r4
 8000366:	635a      	str	r2, [r3, #52]	@ 0x34
 8000368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    cfg_pin(SWC_PIN,     GPIO_MODE_IT_RISING_FALLING, GPIO_PULLUP);
 800036a:	0022      	movs	r2, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800036c:	4023      	ands	r3, r4
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b01      	ldr	r3, [sp, #4]
    cfg_pin(SWC_PIN,     GPIO_MODE_IT_RISING_FALLING, GPIO_PULLUP);
 8000372:	f7ff ffcb 	bl	800030c <cfg_pin>
    cfg_pin(KEY_IN_PIN,  GPIO_MODE_AF_OD, GPIO_PULLUP);
 8000376:	0022      	movs	r2, r4
 8000378:	2112      	movs	r1, #18
 800037a:	2008      	movs	r0, #8
 800037c:	f7ff ffc6 	bl	800030c <cfg_pin>
    cfg_pin(KEY_OUT_PIN, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
 8000380:	2200      	movs	r2, #0
 8000382:	0021      	movs	r1, r4
 8000384:	2010      	movs	r0, #16
 8000386:	f7ff ffc1 	bl	800030c <cfg_pin>
    HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2102      	movs	r1, #2
 800038e:	2005      	movs	r0, #5
 8000390:	f000 f9f2 	bl	8000778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000394:	2005      	movs	r0, #5
 8000396:	f000 fa19 	bl	80007cc <HAL_NVIC_EnableIRQ>

    cfg_gpio();
    raddr_output_init();
    raddr_input_capture_init();

    uint32_t t_bounce = 0;
 800039a:	2500      	movs	r5, #0
    raddr_output_init();
 800039c:	f000 f9d0 	bl	8000740 <raddr_output_init>
    raddr_input_capture_init();
 80003a0:	f000 f90a 	bl	80005b8 <raddr_input_capture_init>
    }
#endif

    /* Main loop */
    while (1) {
        uint32_t now = HAL_GetTick();
 80003a4:	f000 fd18 	bl	8000dd8 <HAL_GetTick>
 80003a8:	0004      	movs	r4, r0

        if (!receive_bits_available()) {
 80003aa:	f000 f8b3 	bl	8000514 <receive_bits_available>
 80003ae:	2800      	cmp	r0, #0
 80003b0:	d110      	bne.n	80003d4 <main+0x84>
            // if no data, take the time to update inputs
            bool input = !HAL_GPIO_ReadPin(GPIOA, SWC_PIN);
 80003b2:	20a0      	movs	r0, #160	@ 0xa0
 80003b4:	2102      	movs	r1, #2
 80003b6:	05c0      	lsls	r0, r0, #23
 80003b8:	f000 fada 	bl	8000970 <HAL_GPIO_ReadPin>
 80003bc:	4243      	negs	r3, r0
 80003be:	4158      	adcs	r0, r3
            // if input changed only set it when done bouncing
            if (input^K_BINARY_INPUTS[0] && t_bounce < now) {
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <main+0xbc>)
            bool input = !HAL_GPIO_ReadPin(GPIOA, SWC_PIN);
 80003c2:	b2c2      	uxtb	r2, r0
            if (input^K_BINARY_INPUTS[0] && t_bounce < now) {
 80003c4:	7819      	ldrb	r1, [r3, #0]
 80003c6:	4281      	cmp	r1, r0
 80003c8:	d0ec      	beq.n	80003a4 <main+0x54>
 80003ca:	42a5      	cmp	r5, r4
 80003cc:	d2ea      	bcs.n	80003a4 <main+0x54>
                K_BINARY_INPUTS[0] = input;
 80003ce:	701a      	strb	r2, [r3, #0]
                t_bounce = now + 2; // only accept change in 2ms
 80003d0:	1ca5      	adds	r5, r4, #2
 80003d2:	e7e7      	b.n	80003a4 <main+0x54>
            }
            continue;
        }

        int bit = receive_bit();
 80003d4:	f000 f8bc 	bl	8000550 <receive_bit>

        switch(bit) {
 80003d8:	1c43      	adds	r3, r0, #1
 80003da:	d005      	beq.n	80003e8 <main+0x98>
 80003dc:	2801      	cmp	r0, #1
 80003de:	d8e1      	bhi.n	80003a4 <main+0x54>
            case 0 ... 1:
                join_cry(bit, CRY_OKAY);
 80003e0:	2100      	movs	r1, #0
 80003e2:	f000 f835 	bl	8000450 <join_cry>
                break;
 80003e6:	e7dd      	b.n	80003a4 <main+0x54>
                //Reset
                /* The input capture got confused, or a forced reset is applied */
#if defined USE_SEMIHOSTING
                //printf("Received RESET!\r\n");
#endif
                join_cry(!GROWL, CRY_RESET);
 80003e8:	2101      	movs	r1, #1
 80003ea:	2000      	movs	r0, #0
 80003ec:	f000 f830 	bl	8000450 <join_cry>
                raddr_output_schedule(1, us_to_timer_tick(TRESET));
 80003f0:	2001      	movs	r0, #1
 80003f2:	4907      	ldr	r1, [pc, #28]	@ (8000410 <main+0xc0>)
 80003f4:	f000 f952 	bl	800069c <raddr_output_schedule>
                raddr_output_schedule(0, us_to_timer_tick(TRESET / 2));
 80003f8:	2000      	movs	r0, #0
 80003fa:	4906      	ldr	r1, [pc, #24]	@ (8000414 <main+0xc4>)
 80003fc:	f000 f94e 	bl	800069c <raddr_output_schedule>
                break;
 8000400:	e7d0      	b.n	80003a4 <main+0x54>
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	40021000 	.word	0x40021000
 8000408:	10310000 	.word	0x10310000
 800040c:	20000118 	.word	0x20000118
 8000410:	000005ff 	.word	0x000005ff
 8000414:	000002ff 	.word	0x000002ff

08000418 <bark_bulk.part.0>:
        raddr_output_schedule(0, us_to_timer_tick(T0L));
    }
}

/**/
static inline void bark_bulk(int bit)
 8000418:	b510      	push	{r4, lr}
{
    if(bit) {
        raddr_output_bulk_schedule(1, us_to_timer_tick(T1H));
 800041a:	2001      	movs	r0, #1
 800041c:	4904      	ldr	r1, [pc, #16]	@ (8000430 <bark_bulk.part.0+0x18>)
 800041e:	f000 f905 	bl	800062c <raddr_output_bulk_schedule>
        raddr_output_bulk_schedule(0, us_to_timer_tick(T1L));
 8000422:	2168      	movs	r1, #104	@ 0x68
 8000424:	2000      	movs	r0, #0
 8000426:	31ff      	adds	r1, #255	@ 0xff
 8000428:	f000 f900 	bl	800062c <raddr_output_bulk_schedule>
    } else {
        raddr_output_bulk_schedule(1, us_to_timer_tick(T0H));
        raddr_output_bulk_schedule(0, us_to_timer_tick(T0L));
    }
}
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	00000257 	.word	0x00000257

08000434 <bark_full.part.0>:
static inline void bark_full(int bit)
 8000434:	b510      	push	{r4, lr}
        raddr_output_schedule(1, us_to_timer_tick(T1H));
 8000436:	2001      	movs	r0, #1
 8000438:	4904      	ldr	r1, [pc, #16]	@ (800044c <bark_full.part.0+0x18>)
 800043a:	f000 f92f 	bl	800069c <raddr_output_schedule>
        raddr_output_schedule(0, us_to_timer_tick(T1L));
 800043e:	2168      	movs	r1, #104	@ 0x68
 8000440:	2000      	movs	r0, #0
 8000442:	31ff      	adds	r1, #255	@ 0xff
 8000444:	f000 f92a 	bl	800069c <raddr_output_schedule>
}
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	00000257 	.word	0x00000257

08000450 <join_cry>:
#include "pack.h"

#define DBG 0

void join_cry(int bit, enum CryCommand cmd)
{
 8000450:	b570      	push	{r4, r5, r6, lr}
    static int state = S_REST;
    static int bark_i = K;

    if (cmd == CRY_RESET) {
        state = S_REST;
 8000452:	2300      	movs	r3, #0
{
 8000454:	0004      	movs	r4, r0
 8000456:	4d2b      	ldr	r5, [pc, #172]	@ (8000504 <join_cry+0xb4>)
    if (cmd == CRY_RESET) {
 8000458:	2901      	cmp	r1, #1
 800045a:	d017      	beq.n	800048c <join_cry+0x3c>
        return;
    }

    switch (state) {
 800045c:	6828      	ldr	r0, [r5, #0]
 800045e:	2803      	cmp	r0, #3
 8000460:	d808      	bhi.n	8000474 <join_cry+0x24>
 8000462:	f7ff fe9d 	bl	80001a0 <__gnu_thumb1_case_uqi>
 8000466:	0802      	.short	0x0802
 8000468:	3727      	.short	0x3727
        case S_REST:
            if (DBG) printf("REST\r\n");
            if (bit == GROWL) { //growl
 800046a:	2c01      	cmp	r4, #1
 800046c:	d102      	bne.n	8000474 <join_cry+0x24>
                if (DBG) printf("goto ALERT\r\n");
                state = S_ALERT;
 800046e:	602c      	str	r4, [r5, #0]
    if(bit) {
 8000470:	f7ff ffe0 	bl	8000434 <bark_full.part.0>
                bark_i = K;
                //maybe check parity? Go to S_REST on parity fail?
            }
            break; //Wait for next bit
    }
}
 8000474:	bd70      	pop	{r4, r5, r6, pc}
            if (bit != HOWL) {
 8000476:	2c01      	cmp	r4, #1
 8000478:	d00a      	beq.n	8000490 <join_cry+0x40>
        raddr_output_schedule(1, us_to_timer_tick(T0H));
 800047a:	21ef      	movs	r1, #239	@ 0xef
 800047c:	2001      	movs	r0, #1
 800047e:	f000 f90d 	bl	800069c <raddr_output_schedule>
        raddr_output_schedule(0, us_to_timer_tick(T0L));
 8000482:	2000      	movs	r0, #0
 8000484:	4920      	ldr	r1, [pc, #128]	@ (8000508 <join_cry+0xb8>)
 8000486:	f000 f909 	bl	800069c <raddr_output_schedule>
                state = S_BARK; //
 800048a:	2303      	movs	r3, #3
 800048c:	602b      	str	r3, [r5, #0]
                break; //Wait for next bit
 800048e:	e7f1      	b.n	8000474 <join_cry+0x24>
            raddr_output_bulk_begin();
 8000490:	f000 f8c6 	bl	8000620 <raddr_output_bulk_begin>
        raddr_output_bulk_schedule(1, us_to_timer_tick(T0H));
 8000494:	21ef      	movs	r1, #239	@ 0xef
 8000496:	0020      	movs	r0, r4
 8000498:	f000 f8c8 	bl	800062c <raddr_output_bulk_schedule>
        raddr_output_bulk_schedule(0, us_to_timer_tick(T0L));
 800049c:	2000      	movs	r0, #0
 800049e:	491a      	ldr	r1, [pc, #104]	@ (8000508 <join_cry+0xb8>)
 80004a0:	f000 f8c4 	bl	800062c <raddr_output_bulk_schedule>
                bark_bulk(K_BINARY_INPUTS[k]);
 80004a4:	4b19      	ldr	r3, [pc, #100]	@ (800050c <join_cry+0xbc>)
    if(bit) {
 80004a6:	781e      	ldrb	r6, [r3, #0]
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d00a      	beq.n	80004c2 <join_cry+0x72>
 80004ac:	f7ff ffb4 	bl	8000418 <bark_bulk.part.0>
            state = S_HOWL; // not really needed
 80004b0:	2302      	movs	r3, #2
 80004b2:	602b      	str	r3, [r5, #0]
 80004b4:	f7ff ffb0 	bl	8000418 <bark_bulk.part.0>
            state = S_REST; //we are the last. Get some rest.
 80004b8:	2300      	movs	r3, #0
 80004ba:	602b      	str	r3, [r5, #0]
            raddr_output_bulk_end();
 80004bc:	f000 f8cc 	bl	8000658 <raddr_output_bulk_end>
            break; //Wait for next bit
 80004c0:	e7d8      	b.n	8000474 <join_cry+0x24>
        raddr_output_bulk_schedule(1, us_to_timer_tick(T0H));
 80004c2:	0020      	movs	r0, r4
 80004c4:	21ef      	movs	r1, #239	@ 0xef
 80004c6:	f000 f8b1 	bl	800062c <raddr_output_bulk_schedule>
        raddr_output_bulk_schedule(0, us_to_timer_tick(T0L));
 80004ca:	0030      	movs	r0, r6
 80004cc:	490e      	ldr	r1, [pc, #56]	@ (8000508 <join_cry+0xb8>)
 80004ce:	f000 f8ad 	bl	800062c <raddr_output_bulk_schedule>
 80004d2:	e7ed      	b.n	80004b0 <join_cry+0x60>
    if(bit) {
 80004d4:	2c00      	cmp	r4, #0
 80004d6:	d00b      	beq.n	80004f0 <join_cry+0xa0>
 80004d8:	f7ff ffac 	bl	8000434 <bark_full.part.0>
            if (!--bark_i) {
 80004dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <join_cry+0xc0>)
 80004de:	6813      	ldr	r3, [r2, #0]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	6013      	str	r3, [r2, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1c5      	bne.n	8000474 <join_cry+0x24>
                state = S_ALERT;
 80004e8:	3301      	adds	r3, #1
 80004ea:	602b      	str	r3, [r5, #0]
                bark_i = K;
 80004ec:	6013      	str	r3, [r2, #0]
 80004ee:	e7c1      	b.n	8000474 <join_cry+0x24>
        raddr_output_schedule(1, us_to_timer_tick(T0H));
 80004f0:	21ef      	movs	r1, #239	@ 0xef
 80004f2:	2001      	movs	r0, #1
 80004f4:	f000 f8d2 	bl	800069c <raddr_output_schedule>
        raddr_output_schedule(0, us_to_timer_tick(T0L));
 80004f8:	0020      	movs	r0, r4
 80004fa:	4903      	ldr	r1, [pc, #12]	@ (8000508 <join_cry+0xb8>)
 80004fc:	f000 f8ce 	bl	800069c <raddr_output_schedule>
 8000500:	e7ec      	b.n	80004dc <join_cry+0x8c>
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	2000011c 	.word	0x2000011c
 8000508:	000002cf 	.word	0x000002cf
 800050c:	20000118 	.word	0x20000118
 8000510:	200000ec 	.word	0x200000ec

08000514 <receive_bits_available>:

/* To be used by the main thread (or any other single thread).
 * Returns the number of bits received */
uint32_t receive_bits_available(void)
{
    return fifo.size;
 8000514:	4b01      	ldr	r3, [pc, #4]	@ (800051c <receive_bits_available+0x8>)
 8000516:	6858      	ldr	r0, [r3, #4]
}
 8000518:	4770      	bx	lr
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	20000120 	.word	0x20000120

08000520 <received_bits_read>:

/* Extract data from the fifo */
uint32_t received_bits_read(void)
{
 8000520:	b570      	push	{r4, r5, r6, lr}
    uint32_t idx = fifo.read;
 8000522:	4c0a      	ldr	r4, [pc, #40]	@ (800054c <received_bits_read+0x2c>)
    uint32_t d = fifo.buf[idx];
    fifo.read = (idx + 1) % FIFO_SIZE;

    /* Updating size must be atomic! Against TIM1 ISR(s) */
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 8000524:	200e      	movs	r0, #14
    uint32_t idx = fifo.read;
 8000526:	7863      	ldrb	r3, [r4, #1]
    uint32_t d = fifo.buf[idx];
 8000528:	1c9a      	adds	r2, r3, #2
 800052a:	0092      	lsls	r2, r2, #2
 800052c:	5915      	ldr	r5, [r2, r4]
    fifo.read = (idx + 1) % FIFO_SIZE;
 800052e:	220f      	movs	r2, #15
 8000530:	3301      	adds	r3, #1
 8000532:	4013      	ands	r3, r2
 8000534:	7063      	strb	r3, [r4, #1]
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 8000536:	f000 f955 	bl	80007e4 <HAL_NVIC_DisableIRQ>
    fifo.size--;
 800053a:	6863      	ldr	r3, [r4, #4]
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800053c:	200e      	movs	r0, #14
    fifo.size--;
 800053e:	3b01      	subs	r3, #1
 8000540:	6063      	str	r3, [r4, #4]
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000542:	f000 f943 	bl	80007cc <HAL_NVIC_EnableIRQ>

    return d;
}
 8000546:	0028      	movs	r0, r5
 8000548:	bd70      	pop	{r4, r5, r6, pc}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	20000120 	.word	0x20000120

08000550 <receive_bit>:
 *  -1 for reset
 *   0 for a zero bit
 *   1 for a one bit
 */
int receive_bit(void)
{
 8000550:	b510      	push	{r4, lr}
    uint32_t d = received_bits_read();
 8000552:	f7ff ffe5 	bl	8000520 <received_bits_read>
            TRESET_TICKS
            );
#endif

    /* TODO define a proper margin. 10 ticks seems to work, more is better I guess */
    switch (t) {
 8000556:	4a0a      	ldr	r2, [pc, #40]	@ (8000580 <receive_bit+0x30>)
 8000558:	b283      	uxth	r3, r0
 800055a:	4293      	cmp	r3, r2
 800055c:	d809      	bhi.n	8000572 <receive_bit+0x22>
 800055e:	3a76      	subs	r2, #118	@ 0x76
 8000560:	2001      	movs	r0, #1
 8000562:	4293      	cmp	r3, r2
 8000564:	d204      	bcs.n	8000570 <receive_bit+0x20>
 8000566:	3bd8      	subs	r3, #216	@ 0xd8
        /* TO*/
        case T0H_TICKS - T1US_IN_TICKS ... T0H_TICKS + T4US_IN_TICKS:
            return 0;
 8000568:	2000      	movs	r0, #0
    switch (t) {
 800056a:	2b76      	cmp	r3, #118	@ 0x76
 800056c:	d900      	bls.n	8000570 <receive_bit+0x20>
            return -1; //Reset
        default:
#if defined(RADDR_INPUT_DEBUG)
            printf("Unknown pulse length %d\r\n", t);
#endif
            return -2; //panic, unknown byte length?
 800056e:	3802      	subs	r0, #2

    }
}
 8000570:	bd10      	pop	{r4, pc}
    switch (t) {
 8000572:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <receive_bit+0x34>)
            return -2; //panic, unknown byte length?
 8000574:	2000      	movs	r0, #0
    switch (t) {
 8000576:	189b      	adds	r3, r3, r2
            return -2; //panic, unknown byte length?
 8000578:	228a      	movs	r2, #138	@ 0x8a
 800057a:	429a      	cmp	r2, r3
 800057c:	4140      	adcs	r0, r0
 800057e:	e7f6      	b.n	800056e <receive_bit+0x1e>
 8000580:	000002b6 	.word	0x000002b6
 8000584:	fffffa46 	.word	0xfffffa46

08000588 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
    uint32_t tmo = TIM1->CCR2;

    /* Clear/acknowledge pending interrupts */
    TIM1->SR = 0;
 8000588:	2200      	movs	r2, #0
    uint32_t tmo = TIM1->CCR2;
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <TIM1_CC_IRQHandler+0x28>)
 800058c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    TIM1->SR = 0;
 800058e:	611a      	str	r2, [r3, #16]
    return fifo.size >= FIFO_SIZE;
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <TIM1_CC_IRQHandler+0x2c>)
 8000592:	685a      	ldr	r2, [r3, #4]
    if (fifo_is_full()) {
 8000594:	2a0f      	cmp	r2, #15
 8000596:	d80a      	bhi.n	80005ae <TIM1_CC_IRQHandler+0x26>
    uint32_t idx = fifo.write;
 8000598:	781a      	ldrb	r2, [r3, #0]
    fifo.buf[idx] = tmo;
 800059a:	1c91      	adds	r1, r2, #2
 800059c:	0089      	lsls	r1, r1, #2
 800059e:	50c8      	str	r0, [r1, r3]
    fifo.write = (idx + 1) % FIFO_SIZE;
 80005a0:	210f      	movs	r1, #15
 80005a2:	3201      	adds	r2, #1
 80005a4:	400a      	ands	r2, r1
 80005a6:	701a      	strb	r2, [r3, #0]
    fifo.size++;
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	3201      	adds	r2, #1
 80005ac:	605a      	str	r2, [r3, #4]
            status
            );
#endif


}
 80005ae:	4770      	bx	lr
 80005b0:	40012c00 	.word	0x40012c00
 80005b4:	20000120 	.word	0x20000120

080005b8 <raddr_input_capture_init>:

void raddr_input_capture_init(void)
{
 80005b8:	b507      	push	{r0, r1, r2, lr}
     * The basic idea is to reset the timer using input 1 and get the length of the +pulse at input 2
     * input 1 defines the full length of the bit.
     * */

    /* Enable the clock towards TIM1 */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005ba:	2180      	movs	r1, #128	@ 0x80
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <raddr_input_capture_init+0x50>)
 80005be:	0109      	lsls	r1, r1, #4
 80005c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    /* Enable the timer. */
    tmp |= TIM_CR1_CEN;
    TIM1->CR1 = tmp;

    /* We need to be the next to highest priority */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, PRIORITY_HIGH, 0);
 80005c2:	200e      	movs	r0, #14
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005c4:	430a      	orrs	r2, r1
 80005c6:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM1->PSC = INPUT_TIMER_DIVIDER - 1;
 80005c8:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	400b      	ands	r3, r1
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	9b01      	ldr	r3, [sp, #4]
    TIM1->CCMR1 = tmp;
 80005d2:	490e      	ldr	r1, [pc, #56]	@ (800060c <raddr_input_capture_init+0x54>)
    TIM1->PSC = INPUT_TIMER_DIVIDER - 1;
 80005d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <raddr_input_capture_init+0x58>)
 80005d6:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->CCMR1 = tmp;
 80005d8:	6199      	str	r1, [r3, #24]
    TIM1->CCER = tmp;
 80005da:	39d1      	subs	r1, #209	@ 0xd1
 80005dc:	39ff      	subs	r1, #255	@ 0xff
 80005de:	6219      	str	r1, [r3, #32]
    TIM1->SMCR = tmp;
 80005e0:	3123      	adds	r1, #35	@ 0x23
 80005e2:	6099      	str	r1, [r3, #8]
    TIM1->DIER = TIM_DIER_CC2IE |
 80005e4:	3950      	subs	r1, #80	@ 0x50
 80005e6:	60d9      	str	r1, [r3, #12]
    TIM1->CCR1 = 10000;
 80005e8:	490a      	ldr	r1, [pc, #40]	@ (8000614 <raddr_input_capture_init+0x5c>)
 80005ea:	6359      	str	r1, [r3, #52]	@ 0x34
    TIM1->CCR3 = 20000;
 80005ec:	490a      	ldr	r1, [pc, #40]	@ (8000618 <raddr_input_capture_init+0x60>)
 80005ee:	63d9      	str	r1, [r3, #60]	@ 0x3c
    TIM1->CCR4 = 30000;
 80005f0:	490a      	ldr	r1, [pc, #40]	@ (800061c <raddr_input_capture_init+0x64>)
 80005f2:	6419      	str	r1, [r3, #64]	@ 0x40
    TIM1->CR1 = tmp;
 80005f4:	2103      	movs	r1, #3
 80005f6:	6019      	str	r1, [r3, #0]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, PRIORITY_HIGH, 0);
 80005f8:	3902      	subs	r1, #2
 80005fa:	f000 f8bd 	bl	8000778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80005fe:	200e      	movs	r0, #14
 8000600:	f000 f8e4 	bl	80007cc <HAL_NVIC_EnableIRQ>
            TIM1->CCER,
            TIM1->SMCR,
            TIM1->DIER
            );
#endif
}
 8000604:	bd07      	pop	{r0, r1, r2, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	40021000 	.word	0x40021000
 800060c:	00000201 	.word	0x00000201
 8000610:	40012c00 	.word	0x40012c00
 8000614:	00002710 	.word	0x00002710
 8000618:	00004e20 	.word	0x00004e20
 800061c:	00007530 	.word	0x00007530

08000620 <raddr_output_bulk_begin>:
}

static int bulk_size;
void raddr_output_bulk_begin(void)
{
    bulk_size = 0;
 8000620:	2200      	movs	r2, #0
 8000622:	4b01      	ldr	r3, [pc, #4]	@ (8000628 <raddr_output_bulk_begin+0x8>)
 8000624:	601a      	str	r2, [r3, #0]
}
 8000626:	4770      	bx	lr
 8000628:	20000168 	.word	0x20000168

0800062c <raddr_output_bulk_schedule>:
    uint32_t idx = fifo.write;
 800062c:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <raddr_output_bulk_schedule+0x24>)

void raddr_output_bulk_schedule(bool bit, uint16_t tmo)
{
 800062e:	b510      	push	{r4, lr}
    uint32_t idx = fifo.write;
 8000630:	7813      	ldrb	r3, [r2, #0]
    uint32_t d = (tmo - isr_latency) | bit << 31;
 8000632:	07c0      	lsls	r0, r0, #31
    fifo.buf[fifo.write] = d;
 8000634:	1c9c      	adds	r4, r3, #2
    uint32_t d = (tmo - isr_latency) | bit << 31;
 8000636:	3948      	subs	r1, #72	@ 0x48
 8000638:	4301      	orrs	r1, r0
    fifo.buf[fifo.write] = d;
 800063a:	00a4      	lsls	r4, r4, #2
 800063c:	50a1      	str	r1, [r4, r2]
    fifo.write = (idx + 1) % FIFO_SIZE;
 800063e:	210f      	movs	r1, #15
 8000640:	3301      	adds	r3, #1
 8000642:	400b      	ands	r3, r1
 8000644:	7013      	strb	r3, [r2, #0]
    fifo_write(bit, tmo);
    bulk_size++;
 8000646:	4a03      	ldr	r2, [pc, #12]	@ (8000654 <raddr_output_bulk_schedule+0x28>)
 8000648:	6813      	ldr	r3, [r2, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	6013      	str	r3, [r2, #0]
}
 800064e:	bd10      	pop	{r4, pc}
 8000650:	2000016c 	.word	0x2000016c
 8000654:	20000168 	.word	0x20000168

08000658 <raddr_output_bulk_end>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000658:	2280      	movs	r2, #128	@ 0x80
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <raddr_output_bulk_end+0x30>)
 800065c:	0392      	lsls	r2, r2, #14
 800065e:	67da      	str	r2, [r3, #124]	@ 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000664:	f3bf 8f6f 	isb	sy
    /* Incrementing the fifo must be atomic against the TIM16 ISR.
     * Since Cortex-M0 does not have STREX/LDREX nor SWP instruction we need to rely on libatomic.
     * Which for reasons beyond me is not implemented for arm-gcc-none-eabi and friends.
     * So lets stick to disabling the TIM16 interrupt for now */
    NVIC_DisableIRQ(TIM16_IRQn);
    fifo.size += bulk_size;
 8000668:	4908      	ldr	r1, [pc, #32]	@ (800068c <raddr_output_bulk_end+0x34>)
 800066a:	4809      	ldr	r0, [pc, #36]	@ (8000690 <raddr_output_bulk_end+0x38>)
 800066c:	684b      	ldr	r3, [r1, #4]
 800066e:	6800      	ldr	r0, [r0, #0]
 8000670:	181b      	adds	r3, r3, r0
 8000672:	604b      	str	r3, [r1, #4]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <raddr_output_bulk_end+0x3c>)
 8000676:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(TIM16_IRQn);

    /* If ISR not enabled the ISR is not running. Start it */
    if (!(TIM16->DIER & TIM_DIER_UIE)) {
 8000678:	2201      	movs	r2, #1
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <raddr_output_bulk_end+0x40>)
 800067c:	68d9      	ldr	r1, [r3, #12]
 800067e:	4211      	tst	r1, r2
 8000680:	d101      	bne.n	8000686 <raddr_output_bulk_end+0x2e>
        /* Generate event to wakeup the ISR */
        TIM16->EGR = TIM_EGR_UG;
 8000682:	615a      	str	r2, [r3, #20]

        /* Enable the timer interrupt, this will take us to the ISR instantly */
        TIM16->DIER = TIM_DIER_UIE;
 8000684:	60da      	str	r2, [r3, #12]
    }
}
 8000686:	4770      	bx	lr
 8000688:	e000e104 	.word	0xe000e104
 800068c:	2000016c 	.word	0x2000016c
 8000690:	20000168 	.word	0x20000168
 8000694:	e000e100 	.word	0xe000e100
 8000698:	40014400 	.word	0x40014400

0800069c <raddr_output_schedule>:
    return fifo.size >= FIFO_SIZE;
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <raddr_output_schedule+0x3c>)
 *
 *  The whole ISR routing adds about ~2.2us (56 cycles on 24Mhz) extra.
 *  Having >6us makes it work reliable: the fifo will not empty in between.
 * */
void raddr_output_schedule(bool bit, uint16_t tmo)
{
 800069e:	b510      	push	{r4, lr}
    return fifo.size >= FIFO_SIZE;
 80006a0:	685a      	ldr	r2, [r3, #4]
    if (fifo_is_full()) {
 80006a2:	2a0f      	cmp	r2, #15
 80006a4:	d816      	bhi.n	80006d4 <raddr_output_schedule+0x38>
    uint32_t idx = fifo.write;
 80006a6:	781a      	ldrb	r2, [r3, #0]
    uint32_t d = (tmo - isr_latency) | bit << 31;
 80006a8:	07c0      	lsls	r0, r0, #31
    fifo.buf[fifo.write] = d;
 80006aa:	1c94      	adds	r4, r2, #2
    uint32_t d = (tmo - isr_latency) | bit << 31;
 80006ac:	3948      	subs	r1, #72	@ 0x48
 80006ae:	4301      	orrs	r1, r0
    fifo.buf[fifo.write] = d;
 80006b0:	00a4      	lsls	r4, r4, #2
 80006b2:	50e1      	str	r1, [r4, r3]
    fifo.write = (idx + 1) % FIFO_SIZE;
 80006b4:	210f      	movs	r1, #15
 80006b6:	3201      	adds	r2, #1
 80006b8:	400a      	ands	r2, r1
 80006ba:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
     * So we tried disabling the TIM16 interrupt.
     * that make it atomic, but also sometime runs other ISR, delaying our precious TIM16_IRQn.
     * That gives ~3.5uS of extra latency.
     * So now we are at good old disable EVERY interrupt to make it fast. */
    __disable_irq();
    fifo.size++;
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	3201      	adds	r2, #1
 80006c2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80006c4:	b662      	cpsie	i
    __enable_irq();

    /* If ISR not enabled the ISR is not running. Start it */
    if (!(TIM16->DIER & TIM_DIER_UIE)) {
 80006c6:	2201      	movs	r2, #1
 80006c8:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <raddr_output_schedule+0x40>)
 80006ca:	68d9      	ldr	r1, [r3, #12]
 80006cc:	4211      	tst	r1, r2
 80006ce:	d101      	bne.n	80006d4 <raddr_output_schedule+0x38>
        /* Generate event to wakeup the ISR */
        TIM16->EGR = TIM_EGR_UG;
 80006d0:	615a      	str	r2, [r3, #20]

        /* Enable the timer interrupt, this will take us to the ISR instantly */
        TIM16->DIER = TIM_DIER_UIE;
 80006d2:	60da      	str	r2, [r3, #12]
    }
}
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	2000016c 	.word	0x2000016c
 80006dc:	40014400 	.word	0x40014400

080006e0 <TIM16_IRQHandler>:
     *
     * That means no crappy bloated HAL code here!
     * Just old skool register writing */

    /* First to the fifo things */
    uint32_t size = fifo.size;
 80006e0:	4814      	ldr	r0, [pc, #80]	@ (8000734 <TIM16_IRQHandler+0x54>)
{
 80006e2:	b510      	push	{r4, lr}
    uint32_t size = fifo.size;
 80006e4:	6843      	ldr	r3, [r0, #4]
    uint32_t t = 0;
    uint32_t bit = 0; //Default to OFF/LOW
    if (size > 0) {
 80006e6:	4914      	ldr	r1, [pc, #80]	@ (8000738 <TIM16_IRQHandler+0x58>)
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d107      	bne.n	80006fc <TIM16_IRQHandler+0x1c>
    /* Second part is writing the GPIO */

    /* BSRR => Bit Set Reset Register.
     * Lower 16 bit: Write 1 to set I/O
     * Upper 16 bit: Write 1 to clear I/O */
    GPIOA->BSRR = bit ? KEY_DATA_OUT_PIN : KEY_DATA_OUT_PIN << 16;
 80006ec:	23a0      	movs	r3, #160	@ 0xa0
 80006ee:	2280      	movs	r2, #128	@ 0x80
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	0352      	lsls	r2, r2, #13
 80006f4:	619a      	str	r2, [r3, #24]

    /* Disable the interrupt,
     * to force not getting here again.
     * It also signal to the writer we are done */
    if (tmo == 0) {
        TIM16->DIER = 0;
 80006f6:	2200      	movs	r2, #0
 80006f8:	60ca      	str	r2, [r1, #12]
 80006fa:	e014      	b.n	8000726 <TIM16_IRQHandler+0x46>
    fifo.read = (idx + 1) % FIFO_SIZE;
 80006fc:	240f      	movs	r4, #15
    uint32_t idx = fifo.read;
 80006fe:	7842      	ldrb	r2, [r0, #1]
        fifo.size = --size;
 8000700:	3b01      	subs	r3, #1
 8000702:	6043      	str	r3, [r0, #4]
    uint32_t d = fifo.buf[idx];
 8000704:	1c93      	adds	r3, r2, #2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	581b      	ldr	r3, [r3, r0]
    fifo.read = (idx + 1) % FIFO_SIZE;
 800070a:	3201      	adds	r2, #1
 800070c:	4022      	ands	r2, r4
 800070e:	7042      	strb	r2, [r0, #1]
    uint32_t tmo = t & 0xFFFF; //Mask out bit, We only use 16 LSBs.
 8000710:	b29a      	uxth	r2, r3
    GPIOA->BSRR = bit ? KEY_DATA_OUT_PIN : KEY_DATA_OUT_PIN << 16;
 8000712:	43db      	mvns	r3, r3
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <TIM16_IRQHandler+0x5c>)
 8000716:	17db      	asrs	r3, r3, #31
 8000718:	4003      	ands	r3, r0
 800071a:	20a0      	movs	r0, #160	@ 0xa0
 800071c:	3310      	adds	r3, #16
 800071e:	05c0      	lsls	r0, r0, #23
 8000720:	6183      	str	r3, [r0, #24]
    if (tmo == 0) {
 8000722:	2a00      	cmp	r2, #0
 8000724:	d0e7      	beq.n	80006f6 <TIM16_IRQHandler+0x16>
    cnt = TIM16->CNT;
#endif
    /* Reload timer to force pickup new ARR. */
    /* TODO find a better solution for this.
     * This does ensure the pulse is at least as long as specified. */
    TIM16->EGR = TIM_EGR_UG;
 8000726:	2301      	movs	r3, #1
    TIM16->ARR = tmo;
 8000728:	62ca      	str	r2, [r1, #44]	@ 0x2c
    TIM16->EGR = TIM_EGR_UG;
 800072a:	614b      	str	r3, [r1, #20]

    /* Acknowledge the interrupt */
    TIM16->SR = ~TIM_IT_UPDATE;
 800072c:	3b03      	subs	r3, #3
 800072e:	610b      	str	r3, [r1, #16]
}
 8000730:	bd10      	pop	{r4, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	2000016c 	.word	0x2000016c
 8000738:	40014400 	.word	0x40014400
 800073c:	000ffff0 	.word	0x000ffff0

08000740 <raddr_output_init>:

void raddr_output_init(void)
{
 8000740:	b507      	push	{r0, r1, r2, lr}
    uint32_t tmpcr1;

    /* First enable the clocking towards TIM16 */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000742:	2180      	movs	r1, #128	@ 0x80
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <raddr_output_init+0x30>)
 8000746:	0289      	lsls	r1, r1, #10
 8000748:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    tmpcr1 |= TIM_CR1_CEN;

    TIM16->CR1 = tmpcr1;

    /* We need to be the highest priority, to ensure rock solid jitter free output! */
    HAL_NVIC_SetPriority(TIM16_IRQn, PRIORITY_HIGHEST, 0);
 800074a:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 800074c:	430a      	orrs	r2, r1
 800074e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    TIM16->CR1 = tmpcr1;
 8000752:	2201      	movs	r2, #1
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000754:	400b      	ands	r3, r1
    TIM16->PSC = TIMER_DIVIDER - 1;
 8000756:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	9b01      	ldr	r3, [sp, #4]
    TIM16->PSC = TIMER_DIVIDER - 1;
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <raddr_output_init+0x34>)
 800075e:	6299      	str	r1, [r3, #40]	@ 0x28
    TIM16->CR1 = tmpcr1;
 8000760:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(TIM16_IRQn, PRIORITY_HIGHEST, 0);
 8000762:	000a      	movs	r2, r1
 8000764:	f000 f808 	bl	8000778 <HAL_NVIC_SetPriority>

    /* Enable our interrupt */
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000768:	2015      	movs	r0, #21
 800076a:	f000 f82f 	bl	80007cc <HAL_NVIC_EnableIRQ>

#if defined(RADDR_OUTPUT_DEBUG)
    printf("HSI Clock: %ld, divider %ld\r\n", HSI_VALUE, TIMER_DIVIDER);
    printf("100us: %d, 10us %d\r\n", us_to_timer_tick(100), us_to_timer_tick(1));
#endif
}
 800076e:	bd07      	pop	{r0, r1, r2, pc}
 8000770:	40021000 	.word	0x40021000
 8000774:	40014400 	.word	0x40014400

08000778 <HAL_NVIC_SetPriority>:
  *         with py32f0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000778:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077a:	24ff      	movs	r4, #255	@ 0xff
 800077c:	2203      	movs	r2, #3
 800077e:	000b      	movs	r3, r1
 8000780:	0021      	movs	r1, r4
 8000782:	4002      	ands	r2, r0
 8000784:	00d2      	lsls	r2, r2, #3
 8000786:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078c:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078e:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000790:	2800      	cmp	r0, #0
 8000792:	db0a      	blt.n	80007aa <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000794:	24c0      	movs	r4, #192	@ 0xc0
 8000796:	4a0b      	ldr	r2, [pc, #44]	@ (80007c4 <HAL_NVIC_SetPriority+0x4c>)
 8000798:	0880      	lsrs	r0, r0, #2
 800079a:	0080      	lsls	r0, r0, #2
 800079c:	1880      	adds	r0, r0, r2
 800079e:	00a4      	lsls	r4, r4, #2
 80007a0:	5902      	ldr	r2, [r0, r4]
 80007a2:	400a      	ands	r2, r1
 80007a4:	4313      	orrs	r3, r2
 80007a6:	5103      	str	r3, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80007a8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007aa:	220f      	movs	r2, #15
 80007ac:	4010      	ands	r0, r2
 80007ae:	3808      	subs	r0, #8
 80007b0:	4a05      	ldr	r2, [pc, #20]	@ (80007c8 <HAL_NVIC_SetPriority+0x50>)
 80007b2:	0880      	lsrs	r0, r0, #2
 80007b4:	0080      	lsls	r0, r0, #2
 80007b6:	1880      	adds	r0, r0, r2
 80007b8:	69c2      	ldr	r2, [r0, #28]
 80007ba:	4011      	ands	r1, r2
 80007bc:	4319      	orrs	r1, r3
 80007be:	61c1      	str	r1, [r0, #28]
 80007c0:	e7f2      	b.n	80007a8 <HAL_NVIC_SetPriority+0x30>
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007cc:	2800      	cmp	r0, #0
 80007ce:	db05      	blt.n	80007dc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d0:	231f      	movs	r3, #31
 80007d2:	4018      	ands	r0, r3
 80007d4:	3b1e      	subs	r3, #30
 80007d6:	4083      	lsls	r3, r0
 80007d8:	4a01      	ldr	r2, [pc, #4]	@ (80007e0 <HAL_NVIC_EnableIRQ+0x14>)
 80007da:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007dc:	4770      	bx	lr
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007e4:	2800      	cmp	r0, #0
 80007e6:	db09      	blt.n	80007fc <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e8:	231f      	movs	r3, #31
 80007ea:	4018      	ands	r0, r3
 80007ec:	3b1e      	subs	r3, #30
 80007ee:	4083      	lsls	r3, r0
 80007f0:	4a03      	ldr	r2, [pc, #12]	@ (8000800 <HAL_NVIC_DisableIRQ+0x1c>)
 80007f2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
 80007f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007f8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80007fc:	4770      	bx	lr
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	e000e104 	.word	0xe000e104

08000804 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	1e43      	subs	r3, r0, #1
 8000808:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	4293      	cmp	r3, r2
 800080e:	d20d      	bcs.n	800082c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000810:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a07      	ldr	r2, [pc, #28]	@ (8000830 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000814:	4807      	ldr	r0, [pc, #28]	@ (8000834 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000818:	6a03      	ldr	r3, [r0, #32]
 800081a:	0609      	lsls	r1, r1, #24
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	430b      	orrs	r3, r1
 8000822:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000828:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800082c:	4770      	bx	lr
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	e000e010 	.word	0xe000e010
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <HAL_GPIO_Init>:
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000838:	4a49      	ldr	r2, [pc, #292]	@ (8000960 <HAL_GPIO_Init+0x128>)
{
 800083a:	b5f0      	push	{r4, r5, r6, r7, lr}
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800083c:	1882      	adds	r2, r0, r2
 800083e:	1e54      	subs	r4, r2, #1
 8000840:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
{
 8000844:	b085      	sub	sp, #20
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000846:	3201      	adds	r2, #1
{
 8000848:	9101      	str	r1, [sp, #4]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800084a:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084c:	9a01      	ldr	r2, [sp, #4]
 800084e:	6812      	ldr	r2, [r2, #0]
 8000850:	0014      	movs	r4, r2
 8000852:	40dc      	lsrs	r4, r3
 8000854:	d101      	bne.n	800085a <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8000856:	b005      	add	sp, #20
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800085a:	2401      	movs	r4, #1
 800085c:	409c      	lsls	r4, r3
 800085e:	46a4      	mov	ip, r4
    if (iocurrent != 0x00u)
 8000860:	4661      	mov	r1, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000862:	4014      	ands	r4, r2
 8000864:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000866:	420a      	tst	r2, r1
 8000868:	d077      	beq.n	800095a <HAL_GPIO_Init+0x122>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086a:	9a01      	ldr	r2, [sp, #4]
 800086c:	2410      	movs	r4, #16
 800086e:	6852      	ldr	r2, [r2, #4]
 8000870:	0015      	movs	r5, r2
 8000872:	43a5      	bics	r5, r4
 8000874:	9502      	str	r5, [sp, #8]
 8000876:	2d02      	cmp	r5, #2
 8000878:	d10e      	bne.n	8000898 <HAL_GPIO_Init+0x60>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800087a:	2507      	movs	r5, #7
 800087c:	260f      	movs	r6, #15
 800087e:	401d      	ands	r5, r3
 8000880:	00ad      	lsls	r5, r5, #2
 8000882:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000884:	08dc      	lsrs	r4, r3, #3
 8000886:	00a4      	lsls	r4, r4, #2
 8000888:	1904      	adds	r4, r0, r4
 800088a:	6a27      	ldr	r7, [r4, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800088c:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800088e:	43b7      	bics	r7, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000890:	690e      	ldr	r6, [r1, #16]
 8000892:	40ae      	lsls	r6, r5
 8000894:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000896:	6226      	str	r6, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000898:	2403      	movs	r4, #3
 800089a:	0026      	movs	r6, r4
 800089c:	005d      	lsls	r5, r3, #1
 800089e:	40ae      	lsls	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008a0:	4014      	ands	r4, r2
 80008a2:	40ac      	lsls	r4, r5
      temp = GPIOx->MODER;
 80008a4:	6801      	ldr	r1, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008a6:	43f7      	mvns	r7, r6
 80008a8:	43b1      	bics	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008aa:	430c      	orrs	r4, r1
      GPIOx->MODER = temp;
 80008ac:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ae:	9c02      	ldr	r4, [sp, #8]
 80008b0:	3c01      	subs	r4, #1
 80008b2:	2c01      	cmp	r4, #1
 80008b4:	d80d      	bhi.n	80008d2 <HAL_GPIO_Init+0x9a>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008b6:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80008b8:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008ba:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008bc:	403e      	ands	r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008be:	40ac      	lsls	r4, r5
 80008c0:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80008c2:	6084      	str	r4, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008c4:	4661      	mov	r1, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008c6:	0914      	lsrs	r4, r2, #4
 80008c8:	409c      	lsls	r4, r3
        temp = GPIOx->OTYPER;
 80008ca:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008cc:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ce:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80008d0:	6044      	str	r4, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008d2:	9901      	ldr	r1, [sp, #4]
      temp = GPIOx->PUPDR;
 80008d4:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008d6:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008d8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008da:	40ac      	lsls	r4, r5
 80008dc:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 80008de:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e0:	00d4      	lsls	r4, r2, #3
 80008e2:	d53a      	bpl.n	800095a <HAL_GPIO_Init+0x122>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80008e4:	2603      	movs	r6, #3
 80008e6:	240f      	movs	r4, #15
 80008e8:	401e      	ands	r6, r3
 80008ea:	00f6      	lsls	r6, r6, #3
 80008ec:	40b4      	lsls	r4, r6
 80008ee:	491d      	ldr	r1, [pc, #116]	@ (8000964 <HAL_GPIO_Init+0x12c>)
        temp = EXTI->EXTICR[position >> 2u];
 80008f0:	089d      	lsrs	r5, r3, #2
 80008f2:	00ad      	lsls	r5, r5, #2
 80008f4:	186d      	adds	r5, r5, r1
 80008f6:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80008f8:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80008fa:	24a0      	movs	r4, #160	@ 0xa0
 80008fc:	05e4      	lsls	r4, r4, #23
 80008fe:	1b04      	subs	r4, r0, r4
 8000900:	1e61      	subs	r1, r4, #1
 8000902:	418c      	sbcs	r4, r1
 8000904:	9903      	ldr	r1, [sp, #12]
 8000906:	4264      	negs	r4, r4
 8000908:	400c      	ands	r4, r1
 800090a:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 800090c:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800090e:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8000910:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8000912:	662c      	str	r4, [r5, #96]	@ 0x60
        temp = EXTI->IMR;
 8000914:	4c14      	ldr	r4, [pc, #80]	@ (8000968 <HAL_GPIO_Init+0x130>)
        temp &= ~(iocurrent);
 8000916:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000918:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800091a:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800091c:	03d1      	lsls	r1, r2, #15
 800091e:	d401      	bmi.n	8000924 <HAL_GPIO_Init+0xec>
        temp &= ~(iocurrent);
 8000920:	003e      	movs	r6, r7
 8000922:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000924:	67e6      	str	r6, [r4, #124]	@ 0x7c
        temp = EXTI->EMR;
 8000926:	4e11      	ldr	r6, [pc, #68]	@ (800096c <HAL_GPIO_Init+0x134>)
          temp |= iocurrent;
 8000928:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR;
 800092a:	6ff4      	ldr	r4, [r6, #124]	@ 0x7c
          temp |= iocurrent;
 800092c:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800092e:	0391      	lsls	r1, r2, #14
 8000930:	d401      	bmi.n	8000936 <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8000932:	402c      	ands	r4, r5
 8000934:	0027      	movs	r7, r4
        EXTI->EMR = temp;
 8000936:	4c0b      	ldr	r4, [pc, #44]	@ (8000964 <HAL_GPIO_Init+0x12c>)
 8000938:	67f7      	str	r7, [r6, #124]	@ 0x7c
        temp = EXTI->RTSR;
 800093a:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 800093c:	9e00      	ldr	r6, [sp, #0]
 800093e:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000940:	02d1      	lsls	r1, r2, #11
 8000942:	d401      	bmi.n	8000948 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8000944:	003e      	movs	r6, r7
 8000946:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000948:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR;
 800094a:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 800094c:	9f00      	ldr	r7, [sp, #0]
 800094e:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000950:	0292      	lsls	r2, r2, #10
 8000952:	d401      	bmi.n	8000958 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000954:	402e      	ands	r6, r5
 8000956:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000958:	6067      	str	r7, [r4, #4]
    position++;
 800095a:	3301      	adds	r3, #1
 800095c:	e776      	b.n	800084c <HAL_GPIO_Init+0x14>
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	affffc00 	.word	0xaffffc00
 8000964:	40021800 	.word	0x40021800
 8000968:	40021804 	.word	0x40021804
 800096c:	40021808 	.word	0x40021808

08000970 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000970:	6900      	ldr	r0, [r0, #16]
 8000972:	4008      	ands	r0, r1
 8000974:	1e43      	subs	r3, r0, #1
 8000976:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000978:	b2c0      	uxtb	r0, r0
}
 800097a:	4770      	bx	lr

0800097c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800097c:	b530      	push	{r4, r5, lr}
 800097e:	b087      	sub	sp, #28
  uint32_t hsidiv;
  uint32_t sysclockfreq;
  const uint32_t hsiValue[5] = {4000000,8000000,16000000,22120000,24000000};
 8000980:	a901      	add	r1, sp, #4
 8000982:	000a      	movs	r2, r1
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000986:	cb31      	ldmia	r3!, {r0, r4, r5}
 8000988:	c231      	stmia	r2!, {r0, r4, r5}
 800098a:	cb11      	ldmia	r3!, {r0, r4}
 800098c:	c211      	stmia	r2!, {r0, r4}
  uint32_t hsiIndex;
#if defined(RCC_PLL_SUPPORT)
  uint32_t pllsource;
#endif
  
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000990:	2238      	movs	r2, #56	@ 0x38
 8000992:	689c      	ldr	r4, [r3, #8]
 8000994:	0020      	movs	r0, r4
 8000996:	4010      	ands	r0, r2
 8000998:	4214      	tst	r4, r2
 800099a:	d10e      	bne.n	80009ba <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800099c:	2407      	movs	r4, #7
 800099e:	681a      	ldr	r2, [r3, #0]

    /* HSISYS used as system clock source */
    hsiIndex = (RCC->ICSCR&RCC_ICSCR_HSI_FS_Msk)>>RCC_ICSCR_HSI_FS_Pos;
 80009a0:	685b      	ldr	r3, [r3, #4]
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80009a2:	0ad2      	lsrs	r2, r2, #11
    hsiIndex = (RCC->ICSCR&RCC_ICSCR_HSI_FS_Msk)>>RCC_ICSCR_HSI_FS_Pos;
 80009a4:	0b5b      	lsrs	r3, r3, #13
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80009a6:	4022      	ands	r2, r4
    hsiIndex = (RCC->ICSCR&RCC_ICSCR_HSI_FS_Msk)>>RCC_ICSCR_HSI_FS_Pos;
 80009a8:	4023      	ands	r3, r4
    if (hsiIndex > 4)
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d800      	bhi.n	80009b0 <HAL_RCC_GetSysClockFreq+0x34>
    hsiIndex = (RCC->ICSCR&RCC_ICSCR_HSI_FS_Msk)>>RCC_ICSCR_HSI_FS_Pos;
 80009ae:	0018      	movs	r0, r3
    {
      hsiIndex = 0;
    }
    sysclockfreq = (hsiValue[hsiIndex] / hsidiv);
 80009b0:	0080      	lsls	r0, r0, #2
 80009b2:	5808      	ldr	r0, [r1, r0]
 80009b4:	40d0      	lsrs	r0, r2
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80009b6:	b007      	add	sp, #28
 80009b8:	bd30      	pop	{r4, r5, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80009ba:	6899      	ldr	r1, [r3, #8]
 80009bc:	4011      	ands	r1, r2
 80009be:	2908      	cmp	r1, #8
 80009c0:	d006      	beq.n	80009d0 <HAL_RCC_GetSysClockFreq+0x54>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80009c2:	6898      	ldr	r0, [r3, #8]
 80009c4:	4010      	ands	r0, r2
 80009c6:	3818      	subs	r0, #24
 80009c8:	4243      	negs	r3, r0
 80009ca:	4158      	adcs	r0, r3
 80009cc:	03c0      	lsls	r0, r0, #15
 80009ce:	e7f2      	b.n	80009b6 <HAL_RCC_GetSysClockFreq+0x3a>
    sysclockfreq = HSE_VALUE;
 80009d0:	4802      	ldr	r0, [pc, #8]	@ (80009dc <HAL_RCC_GetSysClockFreq+0x60>)
  return sysclockfreq;
 80009d2:	e7f0      	b.n	80009b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80009d4:	08000e98 	.word	0x08000e98
 80009d8:	40021000 	.word	0x40021000
 80009dc:	016e3600 	.word	0x016e3600

080009e0 <HAL_RCC_OscConfig>:
{
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	1e05      	subs	r5, r0, #0
  if (RCC_OscInitStruct == NULL)
 80009e4:	d101      	bne.n	80009ea <HAL_RCC_OscConfig+0xa>
    return HAL_ERROR;
 80009e6:	2001      	movs	r0, #1
}
 80009e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ea:	6803      	ldr	r3, [r0, #0]
 80009ec:	07db      	lsls	r3, r3, #31
 80009ee:	d408      	bmi.n	8000a02 <HAL_RCC_OscConfig+0x22>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	079b      	lsls	r3, r3, #30
 80009f4:	d458      	bmi.n	8000aa8 <HAL_RCC_OscConfig+0xc8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	071b      	lsls	r3, r3, #28
 80009fa:	d500      	bpl.n	80009fe <HAL_RCC_OscConfig+0x1e>
 80009fc:	e0c5      	b.n	8000b8a <HAL_RCC_OscConfig+0x1aa>
  return HAL_OK;
 80009fe:	2000      	movs	r0, #0
 8000a00:	e7f2      	b.n	80009e8 <HAL_RCC_OscConfig+0x8>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();      
 8000a02:	2238      	movs	r2, #56	@ 0x38
 8000a04:	4c7b      	ldr	r4, [pc, #492]	@ (8000bf4 <HAL_RCC_OscConfig+0x214>)
 8000a06:	68a3      	ldr	r3, [r4, #8]
 8000a08:	4013      	ands	r3, r2
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000a0a:	2b08      	cmp	r3, #8
 8000a0c:	d106      	bne.n	8000a1c <HAL_RCC_OscConfig+0x3c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a0e:	6823      	ldr	r3, [r4, #0]
 8000a10:	039b      	lsls	r3, r3, #14
 8000a12:	d5ed      	bpl.n	80009f0 <HAL_RCC_OscConfig+0x10>
 8000a14:	6843      	ldr	r3, [r0, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1ea      	bne.n	80009f0 <HAL_RCC_OscConfig+0x10>
 8000a1a:	e7e4      	b.n	80009e6 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a1c:	6843      	ldr	r3, [r0, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d02a      	beq.n	8000a78 <HAL_RCC_OscConfig+0x98>
        if (RCC_OscInitStruct->HSEFreq != 0)
 8000a22:	6881      	ldr	r1, [r0, #8]
 8000a24:	2900      	cmp	r1, #0
 8000a26:	d0de      	beq.n	80009e6 <HAL_RCC_OscConfig+0x6>
          MODIFY_REG(RCC->ECSCR, RCC_ECSCR_HSE_FREQ_Msk, RCC_OscInitStruct->HSEFreq);
 8000a28:	200c      	movs	r0, #12
 8000a2a:	6922      	ldr	r2, [r4, #16]
 8000a2c:	4382      	bics	r2, r0
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	6122      	str	r2, [r4, #16]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a32:	2280      	movs	r2, #128	@ 0x80
 8000a34:	0252      	lsls	r2, r2, #9
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d111      	bne.n	8000a5e <HAL_RCC_OscConfig+0x7e>
 8000a3a:	6822      	ldr	r2, [r4, #0]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a40:	f000 f9ca 	bl	8000dd8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a44:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000a46:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a48:	02bf      	lsls	r7, r7, #10
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	423b      	tst	r3, r7
 8000a4e:	d1cf      	bne.n	80009f0 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a50:	f000 f9c2 	bl	8000dd8 <HAL_GetTick>
 8000a54:	1b80      	subs	r0, r0, r6
 8000a56:	28c8      	cmp	r0, #200	@ 0xc8
 8000a58:	d9f7      	bls.n	8000a4a <HAL_RCC_OscConfig+0x6a>
            return HAL_TIMEOUT;
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	e7c4      	b.n	80009e8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a5e:	21a0      	movs	r1, #160	@ 0xa0
 8000a60:	02c9      	lsls	r1, r1, #11
 8000a62:	428b      	cmp	r3, r1
 8000a64:	d108      	bne.n	8000a78 <HAL_RCC_OscConfig+0x98>
 8000a66:	2380      	movs	r3, #128	@ 0x80
 8000a68:	6821      	ldr	r1, [r4, #0]
 8000a6a:	02db      	lsls	r3, r3, #11
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	6023      	str	r3, [r4, #0]
 8000a70:	6823      	ldr	r3, [r4, #0]
 8000a72:	431a      	orrs	r2, r3
 8000a74:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a76:	e7e3      	b.n	8000a40 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a78:	6822      	ldr	r2, [r4, #0]
 8000a7a:	495f      	ldr	r1, [pc, #380]	@ (8000bf8 <HAL_RCC_OscConfig+0x218>)
 8000a7c:	400a      	ands	r2, r1
 8000a7e:	6022      	str	r2, [r4, #0]
 8000a80:	6822      	ldr	r2, [r4, #0]
 8000a82:	495e      	ldr	r1, [pc, #376]	@ (8000bfc <HAL_RCC_OscConfig+0x21c>)
 8000a84:	400a      	ands	r2, r1
 8000a86:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1d9      	bne.n	8000a40 <HAL_RCC_OscConfig+0x60>
        tickstart = HAL_GetTick();
 8000a8c:	f000 f9a4 	bl	8000dd8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a90:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000a92:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a94:	02bf      	lsls	r7, r7, #10
 8000a96:	6823      	ldr	r3, [r4, #0]
 8000a98:	423b      	tst	r3, r7
 8000a9a:	d0a9      	beq.n	80009f0 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a9c:	f000 f99c 	bl	8000dd8 <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	28c8      	cmp	r0, #200	@ 0xc8
 8000aa4:	d9f7      	bls.n	8000a96 <HAL_RCC_OscConfig+0xb6>
 8000aa6:	e7d8      	b.n	8000a5a <HAL_RCC_OscConfig+0x7a>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aa8:	2338      	movs	r3, #56	@ 0x38
 8000aaa:	4c52      	ldr	r4, [pc, #328]	@ (8000bf4 <HAL_RCC_OscConfig+0x214>)
 8000aac:	68a2      	ldr	r2, [r4, #8]
    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000aae:	421a      	tst	r2, r3
 8000ab0:	d135      	bne.n	8000b1e <HAL_RCC_OscConfig+0x13e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	055b      	lsls	r3, r3, #21
 8000ab6:	d503      	bpl.n	8000ac0 <HAL_RCC_OscConfig+0xe0>
 8000ab8:	68eb      	ldr	r3, [r5, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d100      	bne.n	8000ac0 <HAL_RCC_OscConfig+0xe0>
 8000abe:	e792      	b.n	80009e6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ac0:	6863      	ldr	r3, [r4, #4]
 8000ac2:	696a      	ldr	r2, [r5, #20]
 8000ac4:	0c1b      	lsrs	r3, r3, #16
 8000ac6:	041b      	lsls	r3, r3, #16
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	6063      	str	r3, [r4, #4]
        tickstart = HAL_GetTick();
 8000acc:	f000 f984 	bl	8000dd8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ad0:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000ad2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ad4:	00ff      	lsls	r7, r7, #3
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	423b      	tst	r3, r7
 8000ada:	d01a      	beq.n	8000b12 <HAL_RCC_OscConfig+0x132>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	4a48      	ldr	r2, [pc, #288]	@ (8000c00 <HAL_RCC_OscConfig+0x220>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	692a      	ldr	r2, [r5, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	6023      	str	r3, [r4, #0]
          SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000ae8:	f7ff ff48 	bl	800097c <HAL_RCC_GetSysClockFreq>
 8000aec:	68a3      	ldr	r3, [r4, #8]
 8000aee:	4945      	ldr	r1, [pc, #276]	@ (8000c04 <HAL_RCC_OscConfig+0x224>)
 8000af0:	051b      	lsls	r3, r3, #20
 8000af2:	0f1b      	lsrs	r3, r3, #28
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	585b      	ldr	r3, [r3, r1]
 8000af8:	211f      	movs	r1, #31
 8000afa:	400b      	ands	r3, r1
 8000afc:	40d8      	lsrs	r0, r3
 8000afe:	4a42      	ldr	r2, [pc, #264]	@ (8000c08 <HAL_RCC_OscConfig+0x228>)
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000b00:	4b42      	ldr	r3, [pc, #264]	@ (8000c0c <HAL_RCC_OscConfig+0x22c>)
          SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000b02:	6010      	str	r0, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	f000 f927 	bl	8000d58 <HAL_InitTick>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d100      	bne.n	8000b10 <HAL_RCC_OscConfig+0x130>
 8000b0e:	e772      	b.n	80009f6 <HAL_RCC_OscConfig+0x16>
 8000b10:	e769      	b.n	80009e6 <HAL_RCC_OscConfig+0x6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b12:	f000 f961 	bl	8000dd8 <HAL_GetTick>
 8000b16:	1b80      	subs	r0, r0, r6
 8000b18:	2802      	cmp	r0, #2
 8000b1a:	d9dc      	bls.n	8000ad6 <HAL_RCC_OscConfig+0xf6>
 8000b1c:	e79d      	b.n	8000a5a <HAL_RCC_OscConfig+0x7a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b1e:	68eb      	ldr	r3, [r5, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d01f      	beq.n	8000b64 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	4a36      	ldr	r2, [pc, #216]	@ (8000c00 <HAL_RCC_OscConfig+0x220>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b28:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	692a      	ldr	r2, [r5, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b2e:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000b30:	4313      	orrs	r3, r2
 8000b32:	6023      	str	r3, [r4, #0]
        __HAL_RCC_HSI_ENABLE();
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	6822      	ldr	r2, [r4, #0]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b3e:	f000 f94b 	bl	8000dd8 <HAL_GetTick>
 8000b42:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	423b      	tst	r3, r7
 8000b48:	d006      	beq.n	8000b58 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b4a:	6863      	ldr	r3, [r4, #4]
 8000b4c:	696a      	ldr	r2, [r5, #20]
 8000b4e:	0c1b      	lsrs	r3, r3, #16
 8000b50:	041b      	lsls	r3, r3, #16
 8000b52:	4313      	orrs	r3, r2
 8000b54:	6063      	str	r3, [r4, #4]
 8000b56:	e74e      	b.n	80009f6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b58:	f000 f93e 	bl	8000dd8 <HAL_GetTick>
 8000b5c:	1b80      	subs	r0, r0, r6
 8000b5e:	2802      	cmp	r0, #2
 8000b60:	d9f0      	bls.n	8000b44 <HAL_RCC_OscConfig+0x164>
 8000b62:	e77a      	b.n	8000a5a <HAL_RCC_OscConfig+0x7a>
        __HAL_RCC_HSI_DISABLE();
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	4a2a      	ldr	r2, [pc, #168]	@ (8000c10 <HAL_RCC_OscConfig+0x230>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b68:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b6e:	f000 f933 	bl	8000dd8 <HAL_GetTick>
 8000b72:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b74:	00ff      	lsls	r7, r7, #3
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	423b      	tst	r3, r7
 8000b7a:	d100      	bne.n	8000b7e <HAL_RCC_OscConfig+0x19e>
 8000b7c:	e73b      	b.n	80009f6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b7e:	f000 f92b 	bl	8000dd8 <HAL_GetTick>
 8000b82:	1b80      	subs	r0, r0, r6
 8000b84:	2802      	cmp	r0, #2
 8000b86:	d9f6      	bls.n	8000b76 <HAL_RCC_OscConfig+0x196>
 8000b88:	e767      	b.n	8000a5a <HAL_RCC_OscConfig+0x7a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000b8a:	2238      	movs	r2, #56	@ 0x38
 8000b8c:	4c19      	ldr	r4, [pc, #100]	@ (8000bf4 <HAL_RCC_OscConfig+0x214>)
 8000b8e:	68a3      	ldr	r3, [r4, #8]
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b18      	cmp	r3, #24
 8000b94:	d108      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x1c8>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000b96:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8000b98:	079b      	lsls	r3, r3, #30
 8000b9a:	d400      	bmi.n	8000b9e <HAL_RCC_OscConfig+0x1be>
 8000b9c:	e72f      	b.n	80009fe <HAL_RCC_OscConfig+0x1e>
 8000b9e:	69a8      	ldr	r0, [r5, #24]
 8000ba0:	4243      	negs	r3, r0
 8000ba2:	4158      	adcs	r0, r3
 8000ba4:	b2c0      	uxtb	r0, r0
 8000ba6:	e71f      	b.n	80009e8 <HAL_RCC_OscConfig+0x8>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ba8:	69aa      	ldr	r2, [r5, #24]
 8000baa:	2301      	movs	r3, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d010      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x1f2>
        __HAL_RCC_LSI_ENABLE();
 8000bb0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bb2:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	6623      	str	r3, [r4, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000bb8:	f000 f90e 	bl	8000dd8 <HAL_GetTick>
 8000bbc:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bbe:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8000bc0:	4233      	tst	r3, r6
 8000bc2:	d000      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x1e6>
 8000bc4:	e71b      	b.n	80009fe <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bc6:	f000 f907 	bl	8000dd8 <HAL_GetTick>
 8000bca:	1b40      	subs	r0, r0, r5
 8000bcc:	2802      	cmp	r0, #2
 8000bce:	d9f6      	bls.n	8000bbe <HAL_RCC_OscConfig+0x1de>
 8000bd0:	e743      	b.n	8000a5a <HAL_RCC_OscConfig+0x7a>
        __HAL_RCC_LSI_DISABLE();
 8000bd2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bd4:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8000bd6:	439a      	bics	r2, r3
 8000bd8:	6622      	str	r2, [r4, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000bda:	f000 f8fd 	bl	8000dd8 <HAL_GetTick>
 8000bde:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000be0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8000be2:	4233      	tst	r3, r6
 8000be4:	d100      	bne.n	8000be8 <HAL_RCC_OscConfig+0x208>
 8000be6:	e70a      	b.n	80009fe <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000be8:	f000 f8f6 	bl	8000dd8 <HAL_GetTick>
 8000bec:	1b40      	subs	r0, r0, r5
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d9f6      	bls.n	8000be0 <HAL_RCC_OscConfig+0x200>
 8000bf2:	e732      	b.n	8000a5a <HAL_RCC_OscConfig+0x7a>
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	fffeffff 	.word	0xfffeffff
 8000bfc:	fffbffff 	.word	0xfffbffff
 8000c00:	ffffc7ff 	.word	0xffffc7ff
 8000c04:	08000eac 	.word	0x08000eac
 8000c08:	200000f8 	.word	0x200000f8
 8000c0c:	200000f4 	.word	0x200000f4
 8000c10:	fffffeff 	.word	0xfffffeff

08000c14 <HAL_RCC_ClockConfig>:
{
 8000c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c16:	0004      	movs	r4, r0
 8000c18:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8000c1a:	2800      	cmp	r0, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8000c1e:	2001      	movs	r0, #1
}
 8000c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c22:	2701      	movs	r7, #1
 8000c24:	4d43      	ldr	r5, [pc, #268]	@ (8000d34 <HAL_RCC_ClockConfig+0x120>)
 8000c26:	682b      	ldr	r3, [r5, #0]
 8000c28:	403b      	ands	r3, r7
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d328      	bcc.n	8000c80 <HAL_RCC_ClockConfig+0x6c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	0793      	lsls	r3, r2, #30
 8000c32:	d439      	bmi.n	8000ca8 <HAL_RCC_ClockConfig+0x94>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c34:	07d2      	lsls	r2, r2, #31
 8000c36:	d446      	bmi.n	8000cc6 <HAL_RCC_ClockConfig+0xb2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000c38:	2701      	movs	r7, #1
 8000c3a:	682b      	ldr	r3, [r5, #0]
 8000c3c:	403b      	ands	r3, r7
 8000c3e:	42b3      	cmp	r3, r6
 8000c40:	d908      	bls.n	8000c54 <HAL_RCC_ClockConfig+0x40>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c42:	682b      	ldr	r3, [r5, #0]
 8000c44:	43bb      	bics	r3, r7
 8000c46:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000c48:	f000 f8c6 	bl	8000dd8 <HAL_GetTick>
 8000c4c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c4e:	682b      	ldr	r3, [r5, #0]
 8000c50:	423b      	tst	r3, r7
 8000c52:	d160      	bne.n	8000d16 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	4d38      	ldr	r5, [pc, #224]	@ (8000d38 <HAL_RCC_ClockConfig+0x124>)
 8000c58:	075b      	lsls	r3, r3, #29
 8000c5a:	d463      	bmi.n	8000d24 <HAL_RCC_ClockConfig+0x110>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000c5c:	f7ff fe8e 	bl	800097c <HAL_RCC_GetSysClockFreq>
 8000c60:	68ab      	ldr	r3, [r5, #8]
 8000c62:	4936      	ldr	r1, [pc, #216]	@ (8000d3c <HAL_RCC_ClockConfig+0x128>)
 8000c64:	051b      	lsls	r3, r3, #20
 8000c66:	0f1b      	lsrs	r3, r3, #28
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	585b      	ldr	r3, [r3, r1]
 8000c6c:	211f      	movs	r1, #31
 8000c6e:	400b      	ands	r3, r1
 8000c70:	40d8      	lsrs	r0, r3
 8000c72:	4a33      	ldr	r2, [pc, #204]	@ (8000d40 <HAL_RCC_ClockConfig+0x12c>)
  return HAL_InitTick(uwTickPrio);
 8000c74:	4b33      	ldr	r3, [pc, #204]	@ (8000d44 <HAL_RCC_ClockConfig+0x130>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000c76:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f000 f86d 	bl	8000d58 <HAL_InitTick>
 8000c7e:	e7cf      	b.n	8000c20 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	43bb      	bics	r3, r7
 8000c84:	430b      	orrs	r3, r1
 8000c86:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000c88:	f000 f8a6 	bl	8000dd8 <HAL_GetTick>
 8000c8c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c8e:	682b      	ldr	r3, [r5, #0]
 8000c90:	403b      	ands	r3, r7
 8000c92:	42b3      	cmp	r3, r6
 8000c94:	d0cb      	beq.n	8000c2e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c96:	f000 f89f 	bl	8000dd8 <HAL_GetTick>
 8000c9a:	9b01      	ldr	r3, [sp, #4]
 8000c9c:	1ac0      	subs	r0, r0, r3
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <HAL_RCC_ClockConfig+0x134>)
 8000ca0:	4298      	cmp	r0, r3
 8000ca2:	d9f4      	bls.n	8000c8e <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	e7bb      	b.n	8000c20 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca8:	4923      	ldr	r1, [pc, #140]	@ (8000d38 <HAL_RCC_ClockConfig+0x124>)
 8000caa:	0753      	lsls	r3, r2, #29
 8000cac:	d504      	bpl.n	8000cb8 <HAL_RCC_ClockConfig+0xa4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000cae:	23e0      	movs	r3, #224	@ 0xe0
 8000cb0:	6888      	ldr	r0, [r1, #8]
 8000cb2:	01db      	lsls	r3, r3, #7
 8000cb4:	4303      	orrs	r3, r0
 8000cb6:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cb8:	688b      	ldr	r3, [r1, #8]
 8000cba:	4824      	ldr	r0, [pc, #144]	@ (8000d4c <HAL_RCC_ClockConfig+0x138>)
 8000cbc:	4003      	ands	r3, r0
 8000cbe:	68a0      	ldr	r0, [r4, #8]
 8000cc0:	4303      	orrs	r3, r0
 8000cc2:	608b      	str	r3, [r1, #8]
 8000cc4:	e7b6      	b.n	8000c34 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc6:	6862      	ldr	r2, [r4, #4]
 8000cc8:	4f1b      	ldr	r7, [pc, #108]	@ (8000d38 <HAL_RCC_ClockConfig+0x124>)
 8000cca:	2a01      	cmp	r2, #1
 8000ccc:	d119      	bne.n	8000d02 <HAL_RCC_ClockConfig+0xee>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	039b      	lsls	r3, r3, #14
 8000cd2:	d5a4      	bpl.n	8000c1e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	438b      	bics	r3, r1
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8000cde:	f000 f87b 	bl	8000dd8 <HAL_GetTick>
 8000ce2:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ce4:	2338      	movs	r3, #56	@ 0x38
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	401a      	ands	r2, r3
 8000cea:	6863      	ldr	r3, [r4, #4]
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d0a2      	beq.n	8000c38 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf2:	f000 f871 	bl	8000dd8 <HAL_GetTick>
 8000cf6:	9b01      	ldr	r3, [sp, #4]
 8000cf8:	1ac0      	subs	r0, r0, r3
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <HAL_RCC_ClockConfig+0x134>)
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	d9f1      	bls.n	8000ce4 <HAL_RCC_ClockConfig+0xd0>
 8000d00:	e7d0      	b.n	8000ca4 <HAL_RCC_ClockConfig+0x90>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d103      	bne.n	8000d0e <HAL_RCC_ClockConfig+0xfa>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	055b      	lsls	r3, r3, #21
 8000d0a:	d4e3      	bmi.n	8000cd4 <HAL_RCC_ClockConfig+0xc0>
 8000d0c:	e787      	b.n	8000c1e <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d10:	079b      	lsls	r3, r3, #30
 8000d12:	d4df      	bmi.n	8000cd4 <HAL_RCC_ClockConfig+0xc0>
 8000d14:	e783      	b.n	8000c1e <HAL_RCC_ClockConfig+0xa>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d16:	f000 f85f 	bl	8000dd8 <HAL_GetTick>
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_RCC_ClockConfig+0x134>)
 8000d1c:	1b80      	subs	r0, r0, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d995      	bls.n	8000c4e <HAL_RCC_ClockConfig+0x3a>
 8000d22:	e7bf      	b.n	8000ca4 <HAL_RCC_ClockConfig+0x90>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000d24:	68ab      	ldr	r3, [r5, #8]
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <HAL_RCC_ClockConfig+0x13c>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	68e2      	ldr	r2, [r4, #12]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60ab      	str	r3, [r5, #8]
 8000d30:	e794      	b.n	8000c5c <HAL_RCC_ClockConfig+0x48>
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	40022000 	.word	0x40022000
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	08000eac 	.word	0x08000eac
 8000d40:	200000f8 	.word	0x200000f8
 8000d44:	200000f4 	.word	0x200000f4
 8000d48:	00001388 	.word	0x00001388
 8000d4c:	fffff0ff 	.word	0xfffff0ff
 8000d50:	ffff8fff 	.word	0xffff8fff

08000d54 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000d54:	4770      	bx	lr
	...

08000d58 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000d58:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <HAL_InitTick+0x44>)
{
 8000d5a:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 8000d5c:	6819      	ldr	r1, [r3, #0]
{
 8000d5e:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 8000d60:	2900      	cmp	r1, #0
 8000d62:	d101      	bne.n	8000d68 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d64:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000d66:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000d68:	20fa      	movs	r0, #250	@ 0xfa
 8000d6a:	0080      	lsls	r0, r0, #2
 8000d6c:	f7ff fa22 	bl	80001b4 <__udivsi3>
 8000d70:	4c0b      	ldr	r4, [pc, #44]	@ (8000da0 <HAL_InitTick+0x48>)
 8000d72:	0001      	movs	r1, r0
 8000d74:	6820      	ldr	r0, [r4, #0]
 8000d76:	f7ff fa1d 	bl	80001b4 <__udivsi3>
 8000d7a:	f7ff fd43 	bl	8000804 <HAL_SYSTICK_Config>
 8000d7e:	1e04      	subs	r4, r0, #0
 8000d80:	d1f0      	bne.n	8000d64 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	2d03      	cmp	r5, #3
 8000d84:	d8ee      	bhi.n	8000d64 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	0002      	movs	r2, r0
 8000d88:	2001      	movs	r0, #1
 8000d8a:	0029      	movs	r1, r5
 8000d8c:	4240      	negs	r0, r0
 8000d8e:	f7ff fcf3 	bl	8000778 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <HAL_InitTick+0x4c>)
 8000d94:	0020      	movs	r0, r4
 8000d96:	601d      	str	r5, [r3, #0]
  return status;
 8000d98:	e7e5      	b.n	8000d66 <HAL_InitTick+0xe>
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	200000f0 	.word	0x200000f0
 8000da0:	200000f8 	.word	0x200000f8
 8000da4:	200000f4 	.word	0x200000f4

08000da8 <HAL_Init>:
{
 8000da8:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000daa:	2003      	movs	r0, #3
 8000dac:	f7ff ffd4 	bl	8000d58 <HAL_InitTick>
 8000db0:	1e04      	subs	r4, r0, #0
 8000db2:	d103      	bne.n	8000dbc <HAL_Init+0x14>
    HAL_MspInit();
 8000db4:	f7ff ffce 	bl	8000d54 <HAL_MspInit>
}
 8000db8:	0020      	movs	r0, r4
 8000dba:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000dbc:	2401      	movs	r4, #1
 8000dbe:	e7fb      	b.n	8000db8 <HAL_Init+0x10>

08000dc0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dc0:	4a03      	ldr	r2, [pc, #12]	@ (8000dd0 <HAL_IncTick+0x10>)
 8000dc2:	4904      	ldr	r1, [pc, #16]	@ (8000dd4 <HAL_IncTick+0x14>)
 8000dc4:	6813      	ldr	r3, [r2, #0]
 8000dc6:	6809      	ldr	r1, [r1, #0]
 8000dc8:	185b      	adds	r3, r3, r1
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	4770      	bx	lr
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	200001b4 	.word	0x200001b4
 8000dd4:	200000f0 	.word	0x200000f0

08000dd8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dd8:	4b01      	ldr	r3, [pc, #4]	@ (8000de0 <HAL_GetTick+0x8>)
 8000dda:	6818      	ldr	r0, [r3, #0]
}
 8000ddc:	4770      	bx	lr
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	200001b4 	.word	0x200001b4

08000de4 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit(void)
{
  /* Set the HSI clock to 8MHz by default */
  RCC->ICSCR = (RCC->ICSCR & 0xFFFF0000) | (0x1 << 13) | *(uint32_t *)(0x1fff0f04);
 8000de4:	490c      	ldr	r1, [pc, #48]	@ (8000e18 <SystemInit+0x34>)
 8000de6:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <SystemInit+0x38>)
 8000de8:	684b      	ldr	r3, [r1, #4]
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	0c1b      	lsrs	r3, r3, #16
 8000dee:	041b      	lsls	r3, r3, #16
 8000df0:	4313      	orrs	r3, r2
 8000df2:	2280      	movs	r2, #128	@ 0x80
 8000df4:	0192      	lsls	r2, r2, #6
 8000df6:	4313      	orrs	r3, r2
{
 8000df8:	b510      	push	{r4, lr}
  RCC->ICSCR = (RCC->ICSCR & 0xFFFF0000) | (0x1 << 13) | *(uint32_t *)(0x1fff0f04);
 8000dfa:	604b      	str	r3, [r1, #4]
 8000dfc:	2300      	movs	r3, #0

  /* Configure the Vector Table location add offset address ------------------*/
#if defined (__GNUC__) && !defined (FORBID_VECT_TAB_MIGRATION)
/* By default, place vectors in SRAM for GCC, unless user is doing its own method */
  for(uint8_t i=0;i<48;i++)
    vectors[i] = g_pfnVectors[i];
 8000dfe:	4c08      	ldr	r4, [pc, #32]	@ (8000e20 <SystemInit+0x3c>)
 8000e00:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <SystemInit+0x40>)
 8000e02:	009a      	lsls	r2, r3, #2
 8000e04:	5910      	ldr	r0, [r2, r4]
  for(uint8_t i=0;i<48;i++)
 8000e06:	3301      	adds	r3, #1
    vectors[i] = g_pfnVectors[i];
 8000e08:	5050      	str	r0, [r2, r1]
  for(uint8_t i=0;i<48;i++)
 8000e0a:	2b30      	cmp	r3, #48	@ 0x30
 8000e0c:	d1f9      	bne.n	8000e02 <SystemInit+0x1e>
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET;   /* Vector Table Relocation in Internal SRAM */
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <SystemInit+0x44>)
 8000e12:	0592      	lsls	r2, r2, #22
 8000e14:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal FLASH */
#endif
}
 8000e16:	bd10      	pop	{r4, pc}
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	1fff0f04 	.word	0x1fff0f04
 8000e20:	08000000 	.word	0x08000000
 8000e24:	20000000 	.word	0x20000000
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e2c:	480d      	ldr	r0, [pc, #52]	@ (8000e64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	@ (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	@ (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	@ (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e56:	f7ff ffc5 	bl	8000de4 <SystemInit>
/* Call static constructors. Remove this line if compile with `-nostartfiles` reports error */
  bl __libc_init_array
 8000e5a:	f7ff f97d 	bl	8000158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5e:	f7ff fa77 	bl	8000350 <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   r0, =_estack
 8000e64:	20000c00 	.word	0x20000c00
  ldr r0, =_sdata
 8000e68:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 8000e6c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e70:	08000ef4 	.word	0x08000ef4
  ldr r2, =_sbss
 8000e74:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e78:	200001b8 	.word	0x200001b8

08000e7c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_COMP_IRQHandler>
	...

08000e80 <_init>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr

08000e8c <_fini>:
 8000e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e92:	bc08      	pop	{r3}
 8000e94:	469e      	mov	lr, r3
 8000e96:	4770      	bx	lr
