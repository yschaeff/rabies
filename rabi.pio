;All timing is in us for now
.define public TRESET (64/2)
.define public TTOTAL 40
.define public T0H 10
.define public T1H 25
.define public T0L (TTOTAL - T0H)
.define public T1L (TTOTAL - T1H)

.program howl_count
.wrap_target
start:
   mov y ~NULL          ; start with 0xFFFFFFFF
   wait 0 pin 0         ; wait for a 0
   wait 1 pin 0         ; wait for a 1, aka rising edge
timer:
   jmp y-- test         ; decrement if > 0 goto test
   jmp timerstop        ; if y == 0 jump to timerstop (fail to detect falling. should not happen??)
test:
   jmp pin timer        ; if pin is still high. jump back to timer
timerstop:
   mov ISR ~y
   push noblock
.wrap                    ; start again

.program howl_start
.wrap_target
start:
    pull block
    out x 2
    jmp x-- non_zero
    set pins, 1    [T0H - 1]    ; Write 0
    set pins, 0    [T0L - 1]
    jmp start
non_zero:
    jmp x-- do_reset
    set pins, 1    [T1H - 1]    ; Write 1
    set pins, 0    [T1L - 1]
    jmp start
do_reset:
    set pins, 1    [TRESET - 1] ; Write reset
    set pins, 1    [TRESET - 1]
    set pins, 0    [TRESET - 1]
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void
howl_count_init(PIO pio, uint sm, uint offset, uint inpin, float freq)
{
    pio_gpio_init(pio, inpin);

    pio_sm_set_consecutive_pindirs(pio, sm, inpin, 1, false);

    pio_sm_config c = howl_count_program_get_default_config(offset);

    sm_config_set_in_pins(&c, inpin);
    sm_config_set_jmp_pin(&c, inpin);

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    float div = clock_get_hz(clk_sys) / freq;
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

% c-sdk {
#include "hardware/clocks.h"

static inline void
howl_start_program_init(PIO pio, uint sm, uint offset, uint pin, float freq)
{
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = howl_start_program_get_default_config(offset);
    sm_config_set_set_pins(&c, pin, 1);
    /*sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);*/

    /*Sample at 2 ms*/
    int cycles_per_bit = 1;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

